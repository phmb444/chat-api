Path: bin\server.js

require("dotenv").config();
const app = require("../src/api");

app.use((req, res, next) => {
  next();
});

let port = process.env.API_PORT;

app.listen(port);

console.log("Servidor rodando na porta " + port + "!");


x------------------x-------------------x

Path: documentation.md

# Documentação da API Chat

## Visão Geral

A API Chat é uma aplicação simples construida com Node.js e Express, que permite a criação de salas de chat, a entrada e a saída de usuários nessas salas. A API utiliza MongoDB como banco de dados para armazenar as informações.

## Estrutura de Diretórios

```plaintext
bin/
├── server.js
README.md
src/
├── api.js
├── controller/
│   ├── salaController.js
│   └── usuarioController.js
├── models/
│   ├── db.js
│   ├── salaModel.js
│   └── usuarioModel.js
└── util/
    └── token.js
```

## Iniciar o Servidor

O servidor é iniciado a partir do arquivo `server.js`, onde a configuração de ambiente é carregada com `dotenv`.

### Código

```javascript
require("dotenv").config();
const app = require("../src/api");

let port = process.env.API_PORT;

app.listen(port);

console.log("Servidor rodando na porta " + port + "!");
```

## API Endpoints

### 1. **Home**

- **Endpoint:** `GET /`
- **Descrição:** Retorna uma mensagem de boas-vindas.
- **Resposta Exemplo:**
    ```json
    "Hello World!"
    ```

### 2. **Sobre**

- **Endpoint:** `GET /sobre`
- **Descrição:** Retorna informações sobre a API.
- **Resposta Exemplo:**
    ```json
    {
        "nome": "API-CHAT",
        "versão": "0.1.0",
        "autor": "Pedro Haubert"
    }
    ```

### 3. **Listar Salas**

- **Endpoint:** `GET /salas`
- **Descrição:** Lista todas as salas disponíveis.
- **Autenticação:** Requer um token no cabeçalho de autorização.
- **Parâmetros:** Nenhum.
- **Resposta Exemplo:**
    ```json
    [
        {
            "_id": "sala_id_1",
            "nome": "Sala 1",
            "tipo": "publica",
            "membros": [],
            "mensagens": []
        },
        ...
    ]
    ```

### 4. **Criar Sala**

- **Endpoint:** `POST /salas`
- **Descrição:** Cria uma nova sala.
- **Autenticação:** Requer um token no cabeçalho de autorização.
- **Parâmetros:**
    - `nome` (string): Nome da sala.
    - `tipo` (string): Tipo de sala (pública ou privada).
    - `chave` (string): Chave de acesso (opcional para salas privadas).
- **Resposta Exemplo:**
    ```json
    {
        "ack": true,
        "insertedId": "novo_sala_id"
    }
    ```

### 5. **Entrar em uma Sala**

- **Endpoint:** `POST /salas/entrar`
- **Descrição:** Entra em uma sala existente.
- **Autenticação:** Requer um token no cabeçalho de autorização.
- **Parâmetros:**
    - `salaId` (string): ID da sala que o usuário deseja entrar.
- **Resposta Exemplo:**
    ```json
    {
        "_id": "sala_id_1",
        "nome": "Sala 1",
        "tipo": "publica",
        "membros": ["usuario_nick"],
        "mensagens": []
    }
    ```

### 6. **Registrar Usuário**

- **Endpoint:** `POST /entrar`
- **Descrição:** Registra um novo usuário.
- **Parâmetros:**
    - `nick` (string): Nome do usuário.
- **Resposta Exemplo:**
    ```json
    {
        "usuario": "usuario_nick",
        "token": "token_jwt"
    }
    ```

### 7. **Sair da Sala**

- **Endpoint:** `POST /sair`
- **Descrição:** Remove um usuário do sistema.
- **Parâmetros:**
    - `nick` (string): Nome do usuário que deseja sair.
- **Resposta Exemplo:**
    ```json
    {
        "message": "Usuário removido com sucesso."
    }
    ```

## Controladores

### SalaController

- **get(req, res):** Lista todas as salas. Requer que o token seja validado antes de listar.
- **post(req, res):** Cria uma nova sala. Verifica o token antes de criar a sala.
- **entrar(req, res):** Permite que um usuário entre em uma sala ao verificar o token.

### UsuarioController

- **post(req, res):** Registra um novo usuário e gera um token.
- **delete(req, res):** Remove o usuário da base de dados.

## Modelos

### DB Model (db.js)

Funções para interagir com o banco de dados MongoDB, incluindo:

- **connect()**: Conecta ao banco de dados.
- **findAll(collection)**: Busca todos os documentos de uma coleção.
- **insertOne(collection, data)**: Insere um novo documento em uma coleção.
- **findOne(collection, data)**: Busca um documento específico.
- **deleteOne(collection, data)**: Deleta um documento de uma coleção.
- **entrar(collection, data)**: Adiciona um membro a uma sala existente.

### SalaModel

- **listarSalas()**: Retorna todas as salas.
- **criarSala(data)**: Cria uma nova sala com os dados fornecidos.
- **entrarSala(data)**: Adiciona um usuário a uma sala específica.

### UsuarioModel

- **entrar(data)**: Registra um usuário e gera um token.
- **sair(data)**: Remove um usuário da base de dados.

### Token Util

- **checkToken(token)**: Verifica a validade de um token.
- **generateToken(payload)**: Gera um novo token JWT.
- **decryptToken(token)**: Decifra um token e retorna os dados armazenados.

## Conclusão

Esta documentação cobre as principais funcionalidades da API Chat. Para mais informações sobre as implementações ou para contribuir para o projeto, sinta-se à vontade para explorar o código-fonte correspondente.

x------------------x-------------------x

Path: README.md

﻿# chat-api

falta fazer mandar mensagem
listar mensagens
sair da sala



x------------------x-------------------x

Path: src\api.js

const express = require('express');
const app = express();

app.use(express.urlencoded({extended: true}));
app.use(express.json());

const router = express.Router();
app.use('/', router.get('/', (req, res) => {
    res.status(200).send('Hello World!');}    
));

app.use('/', router.get('/sobre', (req, res) => {
    res.status(200).send({
        'nome': 'API-CHAT',
        'versão':'0.1.0',
        'autor': 'Pedro Haubert'
    });
}));

app.use('/salas', router.get('/salas', async (req,res) => {
    const salaController = require('./controller/salaController');
    let resp = await salaController.get(req);
    res.status(200).send(resp);
}));

app.use('/salas/:id', router.get('/salas/:id', async (req,res) => {
    const salaController = require('./controller/salaController');
    let resp = await salaController.getById(req);
    res.status(200).send(resp);
}));

app.use('/salas', router.post('/salas', async (req,res) => {
    const salaController = require('./controller/salaController');
    let resp = await salaController.post(req, res);
    res.status(200).send(resp);
}));

app.use("/salas/entrar", router.post('/salas/entrar', async (req,res) => {
    const salaController = require('./controller/salaController');
    let resp = await salaController.entrar(req, res);
    res.status(200).send(resp);
}));

app.use('/entrar', router.post('/entrar', async (req,res) => {
    const usuarioController = require('./controller/usuarioController');
    let resp = await usuarioController.post(req, res);
    res.status(200).send(resp);
}));

app.use('/sair' , router.post('/sair', async (req,res) => {
    const usuarioController = require('./controller/usuarioController');
    let resp = await usuarioController.delete(req, res);
    res.status(200).send(resp);
}));

app.use('/mensagens/:id', router.get('/mensagens/:id', async (req,res) => {
    const mensagemController = require('./controller/mensagemController');
    let resp = await mensagemController.get(req);
    res.status(200).send(resp);
}));

app.use('/mensagens', router.post('/mensagens', async (req,res) => {
    const mensagemController = require('./controller/mensagemController');
    let resp = await mensagemController.post(req, res);
    res.status(200).send(resp);
}));


module.exports = app;

x------------------x-------------------x

Path: src\controller\mensagemController.js

let mensagemModel = require('../models/mensagemModel');
let token = require('../util/token');

exports.get = async (req, res) => {
    if (!token.checkToken(req.headers.authorization)){
        return {error: "Token inválido"};
    }
    let resp = await mensagemModel.listarMensagens(req.params.id);
    return resp;
}

exports.post = async (req, res) => {
    if (!token.checkToken(req.headers.authorization)){
        return {error: "Token inválido"};
    }
    let resp = await mensagemModel.enviarMensagem(req);
    return resp;
}

x------------------x-------------------x

Path: src\controller\salaController.js

let salaModel = require('../models/salaModel');
let token = require('../util/token');

exports.get = async (req, res) => {
     if (!token.checkToken(req.headers.authorization)){
        return {error: "Token inválido"};
    }
    let resp = await salaModel.listarSalas();
    return resp;
};

exports.post = async (req, res) => {
    if (!token.checkToken(req.headers.authorization)){
        return {error: "Token inválido"};
    }
    let resp = await salaModel.criarSala(req.body);
    return {salaId: resp.insertedId};
};

exports.entrar = async (req, res) => {
    if (!token.checkToken(req.headers.authorization)){
        return {error: "Token inválido"};
    }
    let resp = await salaModel.entrarSala(req);
    return resp;
}

exports.getById = async (req, res) => {
    if (!token.checkToken(req.headers.authorization)){
        return {error: "Token inválido"};
    }
    let resp = await salaModel.getSalaById(req.params.id);
    return resp;
}

x------------------x-------------------x

Path: src\controller\usuarioController.js

let usuarioModel = require('../models/usuarioModel');

exports.post = async (req, res) => {
    let resp = await usuarioModel.entrar(req.body);
    return resp;
}

exports.delete = async (req, res) => {
    let resp = await usuarioModel.sair(req.body);
    return resp;
}

x------------------x-------------------x

Path: src\models\db.js

const {MongoClient, ObjectId} = require('mongodb');

let singleton;

async function connect(){
    if (singleton) return singleton;
    const client = new MongoClient(process.env.DB_HOST);
    await client.connect();

    singleton = client.db(process.env.DB_DATABASE);
    return singleton;
}

async function findAll (collection){
    const db = await connect();
    return await db.collection(collection).find({}).toArray();
}

async function insertOne (collection, data){
    const db = await connect();
    const existingData = await db.collection(collection).findOne(data);
    if (existingData) {
        console.log("Data already exists in the database");
        return {error: "Já existe um registro com esses dados"};
    }
    const inserted = await db.collection(collection).insertOne(data);
    console.log(inserted);
    return inserted;
}

async function findOne (collection, data){
    const db = await connect();
    return await db.collection(collection).findOne(data);
}

async function deleteOne (collection, data){
    const db = await connect();
    return await db.collection(collection).deleteOne(data);
}

async function entrar(collection, data){
    const db = await connect();
    const sala = await db.collection(collection).findOne(data.salaId);
    if (!sala.membros.includes(data.nick)) {
        sala.membros.push(data.nick);
    }
    await db.collection(collection).updateOne({ _id: data.salaId }, { $set: { membros: sala.membros } });
    return sala;
}

async function updateOne(collection, query, data){
    const db = await connect();
    return await db.collection(collection).updateOne(query, data);
}

module.exports = {findAll, insertOne, findOne, deleteOne, entrar, updateOne};

x------------------x-------------------x

Path: src\models\mensagemModel.js

const db = require('./db')
const token = require('../util/token')
const { ObjectId } = require('mongodb');

async function listarMensagens(salaId) {
    let sala = await db.findOne('salas', {_id: new ObjectId(salaId)});
    return {mensagens: sala.mensagens, usuarios: sala.membros};
}

async function enviarMensagem(data){
    if (!token.checkToken(data.headers.authorization)){
        return {error: "Token inválido"};
    }
    let userNick = await token.decryptToken(data.headers.authorization);
    userNick = userNick.nick;
    let salaId = new ObjectId(data.body.salaId);
    let mensagem = data.body.mensagem;
    let sala = await db.findOne('salas', {_id: salaId});
    console.log(sala);
    sala.mensagens.push({usuario: userNick, mensagem: mensagem, data : new Date()});
    await db.updateOne('salas', {_id: salaId}, {$set: {mensagens: sala.mensagens}});
    return {mensagens: sala.mensagens, usuarios: sala.membros};
}

module.exports = {listarMensagens, enviarMensagem};

x------------------x-------------------x

Path: src\models\salaModel.js

const db = require('./db')
const token = require('../util/token')
const { ObjectId } = require('mongodb');

async function listarSalas() {
  let salas = await db.findAll('salas');
  console.log(salas);
  return salas;
}

async function criarSala(data) {
  let salas = await db.insertOne('salas', {nome: data.nome, tipo: data.tipo, chave : data.chave, membros: [], mensagens: []});
  return salas;
}

async function entrarSala(data) { 
  let decryptedToken = await token.decryptToken(data.headers.authorization);
  let salaId = new ObjectId(data.body.salaId);
  let sala = await db.entrar('salas', {salaId, nick: decryptedToken.nick});
  return sala;
}

async function getSalaById(data) {
  let salaId = new ObjectId(data.params.id);
  let sala = await db.findOne('salas', {salaId});
  return sala;
  
}


module.exports = {listarSalas, criarSala, entrarSala};

x------------------x-------------------x

Path: src\models\usuarioModel.js

const db = require('./db')
const token = require('../util/token')

async function entrar(data) {
  let usuario = await db.insertOne('usuarios', data);
  if (usuario.error) {
    return {message: 'Já existe um registro com esses dados'};
  }
  jwtoken = token.generateToken({nick: data.nick});
  let resp = {
    usuario: data.nick,
    token: jwtoken
  }
  return resp;
}

async function sair(data) {
  let usuario = await db.findOne('usuarios', data);
  if (usuario) {
    await db.deleteOne('usuarios', data);
    return {message: 'Usuário removido com sucesso.'};
  } else {
    return {message: 'Usuário não encontrado.'};
  }
}


module.exports = {entrar, sair};

x------------------x-------------------x

Path: src\util\token.js

const jwt = require("jsonwebtoken");

const checkToken = (token) => {
    try {
        let test = jwt.verify(token, process.env.JWT_SECRET);
        return true;
    } catch (error) {
        return false;
    }
};

const generateToken = (payload) => {
    return jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: "24h" });
};

const decryptToken = async (token) => {
    const decodedToken = await jwt.verify(token, process.env.JWT_SECRET);
    return decodedToken;
}

module.exports = { checkToken, generateToken, decryptToken };


x------------------x-------------------x

